name: dmm-build-release
on:
  push:
    tags:
      - 'v*'
      
jobs:
# https://github.community/t/how-to-create-filter-on-both-tag-and-branch/16936/4
  check-tag-branch:
    outputs:
      tag_hash: ${{ steps.tag-commit-hash.outputs.tag_hash }}
      master_hash: ${{ steps.master-commit-hash.outputs.master_hash }}
    runs-on: ubuntu-latest
    steps:
    - name: get tag commit hash
      id: tag-commit-hash
      run: |
        hash=${{ GITHUB.SHA }}
        echo "::set-output name=tag_hash::${hash}"
        echo $hash
    - name: checkout master
      uses: actions/checkout@v2
      with:
        ref: master
    - name: get latest master commit hash
      id: master-commit-hash
      run: |
        hash=$(git log -n1 --format=format:"%H")
        echo "::set-output name=master_hash::${hash}"
        echo $hash
      

  build:
    name: Build dmm.exe
    runs-on: windows-2019
    
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Build 7zip cmake files
        shell: cmd
        run: call Script\7zppMSVCBuild\PreBuild.bat
      
      - name: Build 7zip
        shell: cmd
        run: call Script\7zppMSVCBuild\BuildRelease.bat
        env:
          vsPlatform: Enterprise
          
      - name: Build wxWidgets
        shell: cmd
        run: call Script\wxWidgetsMSVCBuild\BuildRelease.bat
        env:
          vsPlatform: Enterprise
          
      - name: Build mod manager
        shell: cmd
        run: call VisualStudio\Build.bat
        env:
          vsPlatform: Enterprise
        
      - name: Artifact upload
        uses: actions/upload-artifact@v2
        with:
          name: DMM
          path: VisualStudio\Release\dmm.exe


  release:
    needs: [check-tag-branch,build]
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: ${{ needs.check-tag-branch.outputs.master_hash == needs.check-tag-branch.outputs.tag_hash }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: DMM
          
      - name: Set tag name to env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dmm.exe
          asset_name: dmm.exe
          asset_content_type: application/octet-stream
      